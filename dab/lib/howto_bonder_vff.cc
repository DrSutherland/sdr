/* -*- c++ -*- */
/*
 * Copyright 2004 Free Software Foundation, Inc.
 * 
 * This file is part of GNU Radio
 * 
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 * 
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
 
 // Zürcher Hochschule für Angewandte Wissenschaften
 // Zentrum für Signalverarbeitung und Nachrichtentechnik
 // Michael Höin, 2011
 // info.zsn@zhaw.ch
 
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h>

#include <howto_bonder_vff.h>
#include <gr_io_signature.h>

howto_bonder_vff_sptr 
howto_make_bonder_vff (unsigned int VectorInSize, unsigned int VectorOutSize)
{
  return howto_bonder_vff_sptr (new howto_bonder_vff (VectorInSize,VectorOutSize));
}

howto_bonder_vff::howto_bonder_vff (unsigned int VectorInSize, unsigned int VectorOutSize)
  : gr_block ("bonder_vff",
      gr_make_io_signature (1, 1, sizeof (float)*VectorInSize),
      gr_make_io_signature (1, 1, sizeof (float)*VectorOutSize)),
      d_VectorInSize(VectorInSize),				// Groesse eines Teilblocks
      d_VectorOutSize(VectorOutSize),			// Groesse des Ausgangblocks
      d_Counter(0),								// Wie viele Teilstuecke bereits verarbeitet wurden
      d_Zwischenspeicher()						// Zwischenspeicher der Teilstuecke
{
   
}
//------------------------------------------------------------------------------------------
void
howto_bonder_vff::forecast (int noutput_items, gr_vector_int &ninput_items_required)
{
	unsigned ninputs = ninput_items_required.size ();
	for (unsigned i = 0; i < ninputs; i++)		// Grobe Schaetzung wieviele Inputsamples fuer einen Ausgangswert benoetigt werden
		ninput_items_required[i] = d_VectorOutSize/d_VectorInSize;
}
//------------------------------------------------------------------------------------------
howto_bonder_vff::~howto_bonder_vff ()
{
}
//------------------------------------------------------------------------------------------
int 
howto_bonder_vff::general_work (int noutput_items,
                               gr_vector_int &ninput_items,
                               gr_vector_const_void_star &input_items,
                               gr_vector_void_star &output_items)
{
	const float *in = (const float *) input_items[0];
	float *out = (float *) output_items[0];

	unsigned int input_samples = ninput_items[0];			// Nbr Inputsamples
	unsigned int input_used_counter = 0;					// Verbrauchte Inputvektoren zaehlen
	unsigned int output_generated_counter = 0;				// Anzahl generierte Outputvektoren
	
//------------------------------------------------------------------------------------------
	unsigned int i;											// Schleifenvariable
//------------------------------------------------------------------------------------------

	while (input_used_counter < input_samples && output_generated_counter<noutput_items)
	{
		memcpy(&d_Zwischenspeicher[d_Counter*d_VectorInSize], &in[0], sizeof (float)*d_VectorInSize);	// Teilblock in Zwischenspeicher schreiben
		in+=d_VectorInSize;
		input_used_counter++;
		
		if((d_VectorOutSize/d_VectorInSize)-1 == d_Counter)
		{
			memcpy(&out[0], &d_Zwischenspeicher[0], sizeof (float)*d_VectorOutSize);	// Ausgangsblock schreiben
			output_generated_counter++;
			out += d_VectorOutSize;
			d_Counter = 0;
		}
		else
		{
			d_Counter ++;
		}
	}

	consume_each(input_used_counter);							// Wieviel vom Inputvektor gebruacht wurde
	return output_generated_counter;							// Anzahl Outputdaten
}
