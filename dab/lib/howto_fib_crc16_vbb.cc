/* -*- c++ -*- */
/*
 * Copyright 2004 Free Software Foundation, Inc.
 * 
 * This file is part of GNU Radio
 * 
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 * 
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
 
 // Zürcher Hochschule für Angewandte Wissenschaften
 // Zentrum für Signalverarbeitung und Nachrichtentechnik
 // Michael Höin, 2011
 // info.zsn@zhaw.ch
 
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h>

#include <howto_fib_crc16_vbb.h>
#include <gr_io_signature.h>

howto_fib_crc16_vbb_sptr 
howto_make_fib_crc16_vbb (unsigned int InVectorSize)
{
  return howto_fib_crc16_vbb_sptr (new howto_fib_crc16_vbb (InVectorSize));
}

howto_fib_crc16_vbb::howto_fib_crc16_vbb (unsigned int InVectorSize)
  : gr_block ("fib_crc16_vbb",
      gr_make_io_signature (1, 1, sizeof (char)*InVectorSize),
      gr_make_io_signature (1, 1, sizeof (char)*(InVectorSize-16))),		// CRC16 von den Daten abschneiden
      d_InVectorSize(InVectorSize),		// Inputvektorgroesse
      d_DataVector(),					// Vektor zur CRC Pruefung
      d_dummy()							// Wenn der CRC nicht stimmt wird ein leerer FIB weitergegeben
{
   
}
//------------------------------------------------------------------------------------------
void
howto_fib_crc16_vbb::forecast (int noutput_items, gr_vector_int &ninput_items_required)
{
	unsigned ninputs = ninput_items_required.size ();
	for (unsigned i = 0; i < ninputs; i++)		// Grobe Schaetzung wieviele Inputsamples fuer einen Ausgangswert benoetigt werden
		ninput_items_required[i] = 1;
}
//------------------------------------------------------------------------------------------
howto_fib_crc16_vbb::~howto_fib_crc16_vbb ()
{
	for(int i=0;i<8;i++) d_dummy[i]=1;			// Dummy Block loeschen
	for(int i=8;i<240;i++) d_dummy[i]=0;		// Dummy Block loeschen
}
//------------------------------------------------------------------------------------------
int 
howto_fib_crc16_vbb::general_work (int noutput_items,
                               gr_vector_int &ninput_items,
                               gr_vector_const_void_star &input_items,
                               gr_vector_void_star &output_items)
{
	const char *in = (const char *) input_items[0];
	char *out = (char *) output_items[0];

	unsigned int input_samples = ninput_items[0];			// Nbr Inputsamples
	unsigned int input_used_counter = 0;					// Verbrauchte Inputvektoren zaehlen
	unsigned int output_generated_counter = 0;				// Anzahl generierte Outputvektoren
	
//------------------------------------------------------------------------------------------
	unsigned int i,f;											// Schleifenvariable
	const char Polynomial [] = {0,0,0,1,0,0,0,0,0,0,1,0,0,0,0}; // Polynom [MSB...LSB]
	char CRC [16]; 												// CRC Initialization word
	char Summe;													// Summe des CRC Vektors
//------------------------------------------------------------------------------------------

	while (input_used_counter < input_samples && output_generated_counter<noutput_items)
	{
		Summe =0;
		for (i=0;i<10;i++) CRC[i]=(char)1;
		//CRC = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
		
		memcpy(&d_DataVector[0], &in[0], sizeof (char)*(d_InVectorSize-16));			// Daten uebernehmen
		for(i=(d_InVectorSize-16);i<d_InVectorSize;i++) d_DataVector[i] = in[i] ^ 1;	// Zweikomplement des CRCs bilden und anhaengen
		
		for(i=0;i<d_InVectorSize;i++)							// CRC der Daten berechnen
		{
			if (1 == (CRC[0]^d_DataVector[i]))
			{
				for(f=0;f<15;f++)
				{
					CRC[f] = Polynomial[f] ^ CRC[f+1];
				}
				CRC[15] = 1;
			}
			else
			{
				memcpy(&CRC[0], &CRC[1], sizeof (char)*15);		// Schieberegister
				CRC[15] = 0;
			}
		}
		
		for(i=0;i<16;i++) Summe += CRC[i];						// Summe des CRC Vektors bilden
		
		if(Summe==0)											// CRC ueberpruefen
		{
			memcpy(&out[0], &in[0], sizeof (char)*240);
			out+=d_InVectorSize-16;
			output_generated_counter++;
		}
		else 													// CRC falsch
		{
			memcpy(&out[0], &d_dummy[0], sizeof (char)*240);	// Bei einem Falschen CRC Fehler wird ein FIB ohne inhalt weitergegeben
			out+=d_InVectorSize-16;
			output_generated_counter++;							// Zur Fehlereingrenzung werden die ersten Bits des Inputvektors angezeigt
			printf("CRC Fail %1c %1c %1c %1c %1c %1c %1c %1c \n",in[0]+48,in[1]+48,in[2]+48,in[3]+48,in[4]+48,in[5]+48,in[6]+48,in[7]+48);
		}
		
		in+=d_InVectorSize;
		input_used_counter++;
	}

	consume_each(input_used_counter);							// Wieviel vom Inputvektor gebruacht wurde
	return output_generated_counter;							// Anzahl Outputdaten
}
