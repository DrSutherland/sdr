/* -*- c++ -*- */
/*
 * Copyright 2004 Free Software Foundation, Inc.
 * 
 * This file is part of GNU Radio
 * 
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 * 
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
 
 // Zürcher Hochschule für Angewandte Wissenschaften
 // Zentrum für Signalverarbeitung und Nachrichtentechnik
 // Michael Höin, 2011
 // info.zsn@zhaw.ch
 
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h>

#include <howto_fib_sink_vb.h>
#include <gr_io_signature.h>

howto_fib_sink_vb_sptr 
howto_make_fib_sink_vb ()
{
  return howto_fib_sink_vb_sptr (new howto_fib_sink_vb ());
}

howto_fib_sink_vb::howto_fib_sink_vb ()
  : gr_sync_block ("fib_sink_vb",
      gr_make_io_signature (1, 1, sizeof (char)*240),
      gr_make_io_signature (0, 0, 0))
{
   
}
//------------------------------------------------------------------------------------------
howto_fib_sink_vb::~howto_fib_sink_vb ()
{
}
//------------------------------------------------------------------------------------------
int 
howto_fib_sink_vb::BinToDez(const char *FIG, int Offset, int laenge) 				// Binaer zu dezimal Rechnung
{
	int Value=0;
	for(int i=laenge-1;i>=0;i--) Value += ((int)FIG[i+Offset])*(1<<(laenge-1-i));
	return Value;
}
//------------------------------------------------------------------------------------------
void 
howto_fib_sink_vb::DisplayLabel(const char *FIG, int Offset, int AnzByte) 			// Servicenamen anzeigen
{
	printf("Senderlabel: ");
	for(int i=0;i<AnzByte;i++)
	{
		char ByteValue=0;
		for(int i=7;i>=0;i--) ByteValue += (char)(((int)FIG[i+Offset])*(1<<(8-1-i)));
		Offset += 8;
		printf("%1c",ByteValue);
	}
	printf("\n");
}
//------------------------------------------------------------------------------------------
int 
howto_fib_sink_vb::work (int noutput_items,
                         gr_vector_const_void_star &input_items,
                         gr_vector_void_star &output_items)
{
	const char *in = (const char *) input_items[0];

	unsigned int input_used_counter = 0;					// Verbrauchte Inputvektoren zaehlen
	
//------------------------------------------------------------------------------------------
	unsigned int block,i;									// Schleifenvariable
	unsigned int bitCounter;								// Bitcounter
	char Summe;												// Summe um das Endflag zu finden
	int Type;												// FIG Type
	int Length;												// FIG Length
	int Extension;											// FIG Extension
//------------------------------------------------------------------------------------------

	for (int block = 0; block < noutput_items; block++)
	{
		bitCounter = 0;
		while(bitCounter<240)
		{
			Summe=0;													// Endflag ueberpruefen
			for(i=0;i<8;i++) Summe+=in[bitCounter+i];
			if(Summe==8) break;
			
			Type = BinToDez(in,bitCounter,3);							// FIG Header bestimmen
			Length = BinToDez(in,bitCounter+3,5);						// DIG Laenge bestimmen
			bitCounter+=8;
			
			Extension = BinToDez(in,bitCounter+5,3);					// FIG Datenfield verarbeiten
			if((Type == 1) && (Extension == 1)) DisplayLabel(in,bitCounter+24,16);
			bitCounter += Length*8;
		}
		in+=240;
	}

	return noutput_items;							// Anzahl Outputdaten
}
