/* -*- c++ -*- */
/*
 * Copyright 2004 Free Software Foundation, Inc.
 * 
 * This file is part of GNU Radio
 * 
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 * 
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
 
 // Zürcher Hochschule für Angewandte Wissenschaften
 // Zentrum für Signalverarbeitung und Nachrichtentechnik
 // Michael Höin, 2011
 // info.zsn@zhaw.ch
 
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h>

#include <howto_prearrangement_vbb.h>
#include <gr_io_signature.h>

howto_prearrangement_vbb_sptr 
howto_make_prearrangement_vbb (unsigned int InVectorSize)
{
  return howto_prearrangement_vbb_sptr (new howto_prearrangement_vbb (InVectorSize));
}

howto_prearrangement_vbb::howto_prearrangement_vbb (unsigned int InVectorSize)
  : gr_block ("prearrangement_vbb",
      gr_make_io_signature (1, 1, sizeof (char)*InVectorSize),
      gr_make_io_signature (1, 1, sizeof (char))),
      d_InVectorSize(InVectorSize),
      d_timeinterleaverBridge(0)
{
   
}
//------------------------------------------------------------------------------------------
void
howto_prearrangement_vbb::forecast (int noutput_items, gr_vector_int &ninput_items_required)
{
	unsigned ninputs = ninput_items_required.size ();
	for (unsigned i = 0; i < ninputs; i++)		// Grobe Schaetzung wieviele Inputsamples fuer einen Ausgangswert benoetigt werden
		ninput_items_required[i] = 1;
}
//------------------------------------------------------------------------------------------
howto_prearrangement_vbb::~howto_prearrangement_vbb ()
{
}
//------------------------------------------------------------------------------------------
int 
howto_prearrangement_vbb::general_work (int noutput_items,
                               gr_vector_int &ninput_items,
                               gr_vector_const_void_star &input_items,
                               gr_vector_void_star &output_items)
{
	const char *in = (const char *) input_items[0];
	char *out = (char *) output_items[0];

	unsigned int input_samples = ninput_items[0];			// Nbr Inputsamples
	unsigned int input_used_counter = 0;					// Verbrauchte Inputvektoren zaehlen
	unsigned int output_generated_counter = 0;				// Anzahl generierte Outputvektoren
	
//------------------------------------------------------------------------------------------
	int i;											// Schleifenvariable
	int summe;
//------------------------------------------------------------------------------------------

	while (input_used_counter < input_samples && output_generated_counter+d_InVectorSize/8<noutput_items)
	{
		if (d_timeinterleaverBridge < 15)									// Wegen Time Interleaving erste Daten verwerfen
		{
			d_timeinterleaverBridge++;
			in+=8;
		}
		else
		{
			for(i=0;i<d_InVectorSize/8;i++)
			{
				summe=0;
				for(int i=0;i<8;i++) summe += ((char) in[i])*(1<<(7-i));	// Acht Bit zu einem Byte zusammenfuegen
				in+=8;
				out[0]=summe;
				out++;
				output_generated_counter++;
			}
		}
		input_used_counter++;
	}

	consume_each(input_used_counter);							// Wieviel vom Inputvektor gebruacht wurde
	return output_generated_counter;							// Anzahl Outputdaten
}
