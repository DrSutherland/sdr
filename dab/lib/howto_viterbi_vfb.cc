/* -*- c++ -*- */
/*
 * Copyright 2004 Free Software Foundation, Inc.
 * 
 * This file is part of GNU Radio
 * 
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 * 
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
 // Zürcher Hochschule für Angewandte Wissenschaften
 // Zentrum für Signalverarbeitung und Nachrichtentechnik
 // Michael Höin, 2011
 // info.zsn@zhaw.ch
 
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h>

#include <howto_viterbi_vfb.h>
#include <gr_io_signature.h>

howto_viterbi_vfb_sptr 
howto_make_viterbi_vfb (unsigned int Inputlaenge)
{
  return howto_viterbi_vfb_sptr (new howto_viterbi_vfb (Inputlaenge));
}

howto_viterbi_vfb::howto_viterbi_vfb (unsigned int Inputlaenge)
  : gr_block ("viterbi_vfb",
      gr_make_io_signature (1, 1, sizeof (float)*Inputlaenge),
      gr_make_io_signature (1, 1, sizeof (char)*(Inputlaenge/4))),
      d_Inputlaenge(Inputlaenge),	// Inputvektorlaenge
      d_SpeicherTabs(0),			// Speichertabs bei der Faltung
      d_lange(0),					// Reduzierungfaktor der Inputdaten
      d_Pfad(),						// Welche States miteinander verbunden sind
      d_Ref()						// Array welcher das Optimale-Empfangsergebnis enthält
{
	// Generatorpolynom
	signed int generator [4][7] = {{1,0,1,1,0,1,1},{1,1,1,1,0,0,1},{1,1,0,0,1,0,1},{1,0,1,1,0,1,1}};
	
	// Init //
	
	unsigned int b=0;															// Schleifenvariable
	
	d_SpeicherTabs = (sizeof(generator[0])/sizeof(generator[0][0]))-1;			// Anzahl Speichertabs bei der Faltung
	d_lange = sizeof(generator) / ((d_SpeicherTabs+1) * sizeof(generator[0][0]));	// Reduzierungfaktor der Inputdaten
	
	for(b=0;b<(unsigned int)((1<<d_SpeicherTabs));b++)			// Bsp: Zustand 10 = Index 2 = Moegliche Herkunftsindex 0 oder 1
	{
		d_Pfad[b][0]=(b*2)%(1<<d_SpeicherTabs);
		d_Pfad[b][1]=d_Pfad[b][0]+1;
	}
	
	unsigned int Zeile,Spalte,GeneratorZeile;									// Schleifenvariabeln
	float BinSeq[1<<(d_SpeicherTabs+1)][d_SpeicherTabs+1];							// Binaer Zaehl Array Bsp: [0,0,0;0,0,1;0,1,0;....]
	
	for(Zeile=0;Zeile<(unsigned int)(1<<(d_SpeicherTabs+1));Zeile++)
	{
		for(Spalte=0;Spalte<(d_SpeicherTabs+1);Spalte++)
		{
			BinSeq[Zeile][d_SpeicherTabs-Spalte] = ((unsigned int)(Zeile >> Spalte)) % 2;	// Binaer Zaehl Array bilden
		}
		for(GeneratorZeile=0;GeneratorZeile<d_lange;GeneratorZeile++)
		{
			d_Ref[Zeile][GeneratorZeile] = 0;												// Array initialisieren
			for(Spalte=0;Spalte<(d_SpeicherTabs+1);Spalte++)								// Ein Binaerwert mit dem Generatorpolinom verrechnen
			{
				if( 1 == generator[GeneratorZeile][Spalte]*BinSeq[Zeile][Spalte]) 			// Bestimmen was optimal Empfangen wurde
				{
					d_Ref[Zeile][GeneratorZeile] = ((unsigned int)d_Ref[Zeile][GeneratorZeile]) ^ 1;	// Vektorprodukt bestimmen
				}
			}
			d_Ref[Zeile][GeneratorZeile] = 1-2*d_Ref[Zeile][GeneratorZeile];				// BPSK Folge bilden
		}
	}
}
//------------------------------------------------------------------------------------------
void
howto_viterbi_vfb::forecast (int noutput_items, gr_vector_int &ninput_items_required)
{
	unsigned ninputs = ninput_items_required.size ();
	for (unsigned i = 0; i < ninputs; i++)		// Grobe Schaetzung wieviele Inputsamples fuer einen Ausgangswert benoetigt werden
		ninput_items_required[i] = 1;
}
//------------------------------------------------------------------------------------------
howto_viterbi_vfb::~howto_viterbi_vfb ()
{
}
//------------------------------------------------------------------------------------------
int 
howto_viterbi_vfb::general_work (int noutput_items,
                               gr_vector_int &ninput_items,
                               gr_vector_const_void_star &input_items,
                               gr_vector_void_star &output_items)
{
	const float *in = (const float *) input_items[0];
	char *out = (char *) output_items[0];

	unsigned int input_samples = ninput_items[0];			// Nbr Inputsamples
	unsigned int input_used_counter = 0;					// Verbrauchte Inputvektoren zaehlen
	unsigned int output_generated_counter = 0;				// Anzahl generierte Outputvektoren
	
//------------------------------------------------------------------------------------------
	float Value1;														// Neuer Metrikwert bei verwenden des Pfad 1
	float Value2;														// Neuer Metrikwert bei verwenden des Pfad 2
	unsigned int i,z,index,Offset;
	unsigned int Pfadspeicher [1<<d_SpeicherTabs][d_Inputlaenge/d_lange];
	unsigned int b=0;													// Schleifenvariable
	float Metrik [1<<d_SpeicherTabs][2];							// Aufsummierte Metrik der letzten beiden Symbole
	
	char BitDef [d_Inputlaenge/d_lange];							// Codewort Array initialisieren
	int OldIndex = 0;												// Positionsspeicher,Endstate 0
//------------------------------------------------------------------------------------------

	while (input_used_counter < input_samples && output_generated_counter<noutput_items)
	{
		// Decoder (Metrik bilden) //
		Metrik [0][0]=0;												// Bei Metrikbildung State 0 forsieren
		Metrik [0][1]=0;
		for (b=1;b<(unsigned int)(1<<d_SpeicherTabs);b++)				// Andere States bei Summenbildung benachteiligen
		{
			Metrik [b][0]=-1000;
			Metrik [b][1]=-1000;
		}
		
		for(i=0;i<d_Inputlaenge;i+=d_lange)										// Alle Inputdaten durchlaufen
		{
			for(index=0;index<(unsigned int)(1<<d_SpeicherTabs);index++)		// Alle States durchlaufen
			{
				// Ermitteln ob es zum Erreichen dieses States eine 1 am Eingang brauchte (Offset bei 1)
				Offset = (index>=(unsigned int)(1<<(d_SpeicherTabs-1)))? (1<<(d_SpeicherTabs)) : 0;
				
				Value1 = 0;
				for(z=0;z<d_lange;z++)
				{
					Value1+=d_Ref[d_Pfad[index][0]+Offset][z]*in[i+z];			// Resultierende Metrikveränderung bei verwenden des Übergangs 1
				}
				Value1+=Metrik[d_Pfad[index][0]][0];						// Alter Metrikwert einrechnen
				
				Value2 = 0;
				for(z=0;z<d_lange;z++)
				{
					Value2+=d_Ref[d_Pfad[index][1]+Offset][z]*in[i+z];			// Resultierende Metrikveränderung bei verwenden des Übergangs 2
				}
				Value2+=Metrik[d_Pfad[index][1]][0];						// Alter Metrikwert einrechnen
				
				if(Value1 > Value2)
				{
					Metrik[index][1] =  Value1;							// Metrik nachfuehren
					Pfadspeicher[index][i/d_lange] = d_Pfad[index][0];		// Siegerpfad merken
				}
				else
				{
					Metrik[index][1] =  Value2;							// Metrik nachfuehren
					Pfadspeicher[index][i/d_lange] = d_Pfad[index][1];		// Siegerpfad merken
				}
			}
			
			
			for(index=0;index<(unsigned int)(1<<d_SpeicherTabs);index++)	// Metrik drehen damit sie bereit fuer naechsten Durchgang ist
			{
				Metrik[index][0] = Metrik[index][1];
			}
		}
		
		// Decoder (Bitbestimmung, Pfad ruckwaerts durchlaufen) //
		
		BitDef[d_Inputlaenge/d_lange -1] = 0;							// Da im State 0
		
		for(i=1;i<d_Inputlaenge/d_lange;i++)							// Pfad rueckwerts durchlaufen
		{
			OldIndex = Pfadspeicher[OldIndex][d_Inputlaenge/d_lange -i];						// Vorheriger State ermitteln
			BitDef[d_Inputlaenge/d_lange -i-1]= (OldIndex>=(1<<(d_SpeicherTabs-1))) ? 1 : 0;	// Ermitteltes Bit schreiben
		}
		
		memcpy(&out[0], &BitDef[0], sizeof (char)*(d_Inputlaenge/d_lange));	// Outputvektor schreiben
		input_used_counter++;
		output_generated_counter++;
		in+=d_Inputlaenge;													// Inputdaten nachfuehren
	}

	consume_each(input_used_counter);							// Wieviel vom Inputvektor gebruacht wurde
	return output_generated_counter;							// Anzahl Outputdaten
}
